#################################################################################
###---###                G a i a                                        ###---###
###---###              G S R P a r                                      ###---###
###---###            M a k e f i l e                                    ###---###
###---###---###---###---###---###---###---###---###---###---###---###---###---###
###---###---###---###---###---###---###---###---###---###---###---###---###---###
#################################################################################

#################################################################################
###---### C O M P I L E R   S E T T I N G S                             ###---###
###---###---###---###---###---###---###---###---###---###---###---###---###---###

GNUTOOLCHAIN	?=	#PATHTOGNUSTLIBRARY
MPI_HOME		?=	#PATHTOMPIHOME
GPUARCH			?=	#GPU architectures (could be: sm_90,sm_80,sm_75,sm_70,gfx90a,gfx908)
ROCM_PATH		?= 	#ROCHPATH
KOKKOSHOME		?= 	#KOKKOSINSTALLATIONDIRECTORY

# Conditional statements
ifeq ("$(GPUARCH)","sm_90")
    $(info Compiling code for Hopper)
	GENCODE		=arch=compute_90,code=$(GPUARCH)
	GPUFLAG		=cc90
	CUDAFLAG	= -std=c++20 
	PLATFORM	=-D__NVIDIA90__
else ifeq ("$(GPUARCH)","sm_80")
    $(info Compiling code for Ampere)
	GENCODE		=arch=compute_80,code=$(GPUARCH)
	GPUFLAG		=cc80
	TBBLINK		=-ltbb
	CUDAFLAG	=-std=c++20
	PLATFORM	=-D__NVIDIA80__
else ifeq ("$(GPUARCH)","sm_75")
    $(info Compiling code for Tesla)
	GENCODE		=arch=compute_75,code=$(GPUARCH)
	GPUFLAG		=cc75
	CUDAFLAG	= -std=c++20 
	PLATFORM	=-D__NVIDIA70__
else ifeq ("$(GPUARCH)","sm_70")
    $(info Compiling code for Volta)
	GENCODE		=arch=compute_70,code=$(GPUARCH)
	GPUFLAG		=cc70
	CUDAFLAG	= -std=c++20 
	PLATFORM	=-D__NVIDIA70__
else ifeq ("$(GPUARCH)","gfx90a")
    $(info Compiling code for AMD MI250)
	PLATFORM	=-D__MI250X__
else ifeq ("$(GPUARCH)","gfx908")
    $(info Compiling code for AMD MI100)
        PLATFORM        =-D__MI100X__
else
    $(info GPUARCH has an unexpected value: $(GPUARCH))
endif


CMPSYCL  		= acpp
CMPNVCPP  		= acpp
CMPOMPGPU  		= amdclang++
CMPHIP			= hipcc
CMPOPENACC      = g++
CMPKOKKOS		= hipcc


###---###
ifeq ($(USE_MPI),ON)
    $(info Compile with MPI)
	OPTCOM		= -O3 -std=c++20 $(PLATFORM) -D__AMD__ -D__HIP_PLATFORM_AMD__ -DUSE_MPI
else
    $(info Compile without MPI)
	OPTCOM		= -O3 -std=c++20 $(PLATFORM) -DKERNELTIME -D__AMD__ -D__HIP_PLATFORM_AMD__
endif

OPTSYCL		= $(OPTCOM) --gcc-toolchain=$(GNUTOOLCHAIN) --acpp-platform=rocm --acpp-targets=hip:$(GPUARCH) --acpp-gpu-arch=$(GPUARCH) -munsafe-fp-atomics  #-DUSE_MPI
OPTSTDPARG	= $(OPTCOM) --gcc-toolchain=$(GNUTOOLCHAIN) -stdlib=libstdc++ --acpp-platform=rocm --acpp-stdpar --acpp-targets=hip:$(GPUARCH) --acpp-stdpar-unconditional-offload --acpp-gpu-arch=$(GPUARCH) -munsafe-fp-atomics -D__HIPCC__ 
OPTOMPGPU   = $(OPTCOM) --gcc-toolchain=$(GNUTOOLCHAIN) -fopenmp --offload-arch=$(GPUARCH) -munsafe-fp-atomics   
OPTHIP     	= $(OPTCOM) --offload-arch=$(GPUARCH) -munsafe-fp-atomics 
OPTOPENACC  = $(OPTCOM) -fopenacc -O3 
OPTKOKKOS	= $(OPTCOM) --offload-arch=$(GPUARCH)  -fopenmp -munsafe-fp-atomics 

###---###
CPPSYCL		= $(CMPSYCL) 	 $(OPTSYCL)
CPPSTDPARG	= $(CMPNVCPP) 	 $(OPTSTDPARG)
CPPOMPGPU	= $(CMPOMPGPU) 	 $(OPTOMPGPU)
CPPHIP		= $(CMPHIP) 	 $(OPTHIP)
CPPOPENACC  = $(CMPOPENACC)  $(OPTOPENACC)
CPPKOKKOS	= $(CMPKOKKOS) $(OPTKOKKOS) -I$(KOKKOSHOME)/include


###---###
GAIA_INC = -I$(PWD)/include
ROCM_INC = -I$(ROCM_PATH)/include
ifeq ($(USE_MPI),ON)
	MPI_INC = -I$(MPI_HOME)/include
	INCLUDE = $(GAIA_INC) $(ROCM_INC) $(MPI_INC)
else
	INCLUDE = $(GAIA_INC) $(ROCM_INC)
endif
CPPFLAGS = $(INCLUDE)


ROCM_LIB=-L$(ROCM_PATH)/lib -lamdhip64
ifeq ($(USE_MPI),ON)
	MPI_LIB  = -L$(MPI_HOME)/lib -lmpi
	LIB      =  $(ROCM_LIB) #$(MPI_LIB)
else
	LIB       =  $(ROCM_LIB) 
endif


###---### O B J E C T S
GAIAGSRSIMSYCL			= build_obj/lsqrblas_sycl.o build_obj/lsqr_sycl.o build_obj/solvergaiaSim_sycl.o build_obj/util_sycl.o
GAIAGSRSIMSTDPARGPU		= build_obj/lsqrblas_stdpar.o build_obj/lsqr_stdpar.o build_obj/solvergaiaSim_stdpar.o build_obj/util_stdpar.o
GAIAGSRSIMOMPGPU		= build_obj/lsqrblas_omp.o build_obj/lsqr_openmp_gpu.o build_obj/solvergaiaSim_omp.o build_obj/util_omp.o
GAIAGSRSIMHIP			= build_obj/lsqrblas_hip.o build_obj/lsqr_hip.o build_obj/solvergaiaSim_hip.o build_obj/util_hip.o
GAIAGSRSIMOPENACC       = build_obj/lsqrblas_openacc.o build_obj/lsqr_openacc.o build_obj/solvergaiaSim_openacc.o build_obj/util_openacc.o
GAIAGSRSIMKOKKOS		= build_obj/lsqrblas_kokkos.o build_obj/lsqr_kokkos.o build_obj/solvergaiaSim_kokkos.o build_obj/util_kokkos.o

###---### R U L E S
.PHONY: all sycl stdparG ompG openacc hip kokkos dir clean

# all:  clean cuda sycl stdparG ompG hip
sycl: build_obj/GaiaGsrParSimAdaptiveSycl.x
stdparG: build_obj/GaiaGsrParSimAdaptiveCPP.x
ompG: build_obj/GaiaGsrParSimOMPGpu_AMD.x
hip: build_obj/GaiaGsrParSimHip.x
openacc: build_obj/GaiaGsrParSimOpenACC_NVCPP.x
kokkos: build_obj/GaiaGsrParSimKokkos.x

dir:
	mkdir -p build_obj

clean:
	rm -rf build_obj *.x


build_obj/GaiaGsrParSimAdaptiveCPP.x: dir src/solvergaiaSim.cpp src/util.cpp  src/lsqrblas.cpp src/lsqr_stdpar.cpp
	$(CPPSTDPARG) $(CPPFLAGS) -c src/solvergaiaSim.cpp -o build_obj/solvergaiaSim_stdpar.o
	$(CPPSTDPARG) $(CPPFLAGS) -c src/util.cpp -o build_obj/util_stdpar.o
	$(CPPSTDPARG) $(CPPFLAGS) -c src/lsqrblas.cpp -o build_obj/lsqrblas_stdpar.o
	$(CPPSTDPARG) $(CPPFLAGS) -c src/lsqr_stdpar.cpp -o build_obj/lsqr_stdpar.o
	$(CPPSTDPARG) -o GaiaGsrParSimAdaptiveCPP.x $(GAIAGSRSIMSTDPARGPU) $(INCLUDE) $(LIB)

build_obj/GaiaGsrParSimAdaptiveSycl.x: dir src/lsqr_sycl.cpp src/lsqrblas.cpp src/util.cpp src/solvergaiaSim.cpp
	$(CPPSYCL) $(CPPFLAGS) -c src/lsqr_sycl.cpp -o build_obj/lsqr_sycl.o
	$(CPPSYCL) $(CPPFLAGS) -c src/lsqrblas.cpp -o build_obj/lsqrblas_sycl.o
	$(CPPSYCL) $(CPPFLAGS) -c src/util.cpp -o build_obj/util_sycl.o
	$(CPPSYCL) $(CPPFLAGS) -c src/solvergaiaSim.cpp -o build_obj/solvergaiaSim_sycl.o
	$(CPPSYCL) -o GaiaGsrParSimAdaptiveSycl.x $(GAIAGSRSIMSYCL) $(INCLUDE) $(LIB)

build_obj/GaiaGsrParSimOMPGpu_AMD.x: dir src/lsqr_openmp_gpu.cpp src/lsqrblas.cpp  src/util.cpp src/solvergaiaSim.cpp
	$(CPPOMPGPU) $(CPPFLAGS) -c src/lsqr_openmp_gpu.cpp	-o build_obj/lsqr_openmp_gpu.o
	$(CPPOMPGPU) $(CPPFLAGS) -c src/lsqrblas.cpp -o build_obj/lsqrblas_omp.o
	$(CPPOMPGPU) $(CPPFLAGS) -c src/util.cpp -o build_obj/util_omp.o
	$(CPPOMPGPU) $(CPPFLAGS) -c src/solvergaiaSim.cpp -o build_obj/solvergaiaSim_omp.o
	$(CPPOMPGPU) -o GaiaGsrParSimOMPGpu_AMD.x $(GAIAGSRSIMOMPGPU) $(INCLUDE) $(LIB)

build_obj/GaiaGsrParSimHip.x: dir src/lsqr_hip.cpp src/lsqrblas.cpp src/util.cpp src/solvergaiaSim.cpp
	$(CPPHIP) $(CPPFLAGS) -c src/lsqr_hip.cpp	-o build_obj/lsqr_hip.o
	$(CPPHIP) $(CPPFLAGS) -c src/lsqrblas.cpp -o build_obj/lsqrblas_hip.o
	$(CPPHIP) $(CPPFLAGS) -c src/util.cpp -o build_obj/util_hip.o
	$(CPPHIP) $(CPPFLAGS) -c src/solvergaiaSim.cpp -o build_obj/solvergaiaSim_hip.o
	$(CPPHIP) -o GaiaGsrParSimHip.x $(GAIAGSRSIMHIP) $(INCLUDE) $(LIB)

build_obj/GaiaGsrParSimOpenACC_NVCPP.x: dir src/lsqr_openacc.cpp src/lsqrblas.cpp src/util.cpp src/solvergaiaSim.cpp
	$(CPPOPENACC) $(CPPFLAGS) -c src/lsqr_openacc.cpp	-o build_obj/lsqr_openacc.o
	$(CPPOPENACC) $(CPPFLAGS) -c src/lsqrblas.cpp -o build_obj/lsqrblas_openacc.o
	$(CPPOPENACC) $(CPPFLAGS) -c src/util.cpp -o build_obj/util_openacc.o
	$(CPPOPENACC) $(CPPFLAGS) -c src/solvergaiaSim.cpp -o build_obj/solvergaiaSim_openacc.o
	$(CPPOPENACC) -o GaiaGsrParSimOpenACC_NVCPP.x $(GAIAGSRSIMOPENACC) $(INCLUDE) $(LIB)

build_obj/GaiaGsrParSimKokkos.x: dir src/lsqr_kokkos.cpp src/lsqrblas.cpp src/util.cpp src/solvergaiaSim.cpp
	$(CPPKOKKOS) $(CPPFLAGS) -c src/lsqr_kokkos.cpp	-o build_obj/lsqr_kokkos.o
	$(CPPKOKKOS) $(CPPFLAGS) -c src/lsqrblas.cpp -o build_obj/lsqrblas_kokkos.o
	$(CPPKOKKOS) $(CPPFLAGS) -c src/util.cpp -o build_obj/util_kokkos.o
	$(CPPKOKKOS) $(CPPFLAGS) -c src/solvergaiaSim.cpp -o build_obj/solvergaiaSim_kokkos.o
	$(CPPKOKKOS) -o GaiaGsrParSimKokkos.x $(GAIAGSRSIMKOKKOS) $(INCLUDE) $(LIB) -L$(KOKKOSHOME)/lib64 -lkokkoscore -lkokkoscontainers
